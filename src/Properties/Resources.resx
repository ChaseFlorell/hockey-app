<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Help_Description" xml:space="preserve">
    <value>Show help message and exit</value>
  </data>
  <data name="Help_Keyword" xml:space="preserve">
    <value>help|h|?</value>
  </data>
  <data name="Help_Title" xml:space="preserve">
    <value>Get Help:</value>
  </data>
  <data name="Common_Divider" xml:space="preserve">
    <value>----------</value>
  </data>
  <data name="Module_Duration" xml:space="preserve">
    <value>Duration: {0:h'h 'm'm 's's'}</value>
  </data>
  <data name="Module_Begin" xml:space="preserve">
    <value>Begin {0}</value>
  </data>
  <data name="Help_UsageTitle" xml:space="preserve">
    <value>Usage:</value>
  </data>
  <data name="Help_OptionsTitle" xml:space="preserve">
    <value>Options:</value>
  </data>
  <data name="Help_ModuleHelp" xml:space="preserve">
    <value>	{0} {1} /?</value>
  </data>
  <data name="Help_ModuleUsage" xml:space="preserve">
    <value>	{0} {1} [OPTIONS]</value>
  </data>
  <data name="Upload_Uploading" xml:space="preserve">
    <value>Uploading {0}</value>
  </data>
  <data name="Upload_AppIdDescription" xml:space="preserve">
    <value>(required), Your Application ID</value>
  </data>
  <data name="Upload_ModuleDescription" xml:space="preserve">
    <value>Upload an application to HockeyApp</value>
  </data>
  <data name="Upload_DSYMDescription" xml:space="preserve">
    <value>file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.</value>
  </data>
  <data name="Upload_IpaDescription" xml:space="preserve">
    <value>file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</value>
  </data>
  <data name="Upload_ModuleKeyword" xml:space="preserve">
    <value>upload</value>
  </data>
  <data name="Upload_MandatoryDescription" xml:space="preserve">
    <value>set version as mandatory</value>
  </data>
  <data name="Upload_NotesDescription" xml:space="preserve">
    <value>release notes as Textile or Markdown (after 5k characters note are truncated). If multi-line release notes are needed, pass in the path to a file containing the release notes.</value>
  </data>
  <data name="Upload_NotesTypeDescription" xml:space="preserve">
    <value>Type of release notes (defaults is text).\n\t'0' for Textile\n\t'1' for Markdown</value>
  </data>
  <data name="Upload_NotifyDescription" xml:space="preserve">
    <value>notify testers (can only be set with full-access tokens):\n\t'0' to not notify testers\n\t'1' to notify all testers that can install\n\t'2' to notify all testers].</value>
  </data>
  <data name="Upload_ReleaseTypeDescription" xml:space="preserve">
    <value>sets the release type of the app.\n\t'2' for alpha\n\t'0' for beta (default)\n\t'1' for store\n\t'3' for enterprise</value>
  </data>
  <data name="Upload_StatusDescription" xml:space="preserve">
    <value>download status (can only be set with full-access tokens).\n\t'1' to not allow users to download the version\n\t'2' to make the version available for download</value>
  </data>
  <data name="Upload_StrategyDescription" xml:space="preserve">
    <value>'replace' or `add` a build with the same build number.</value>
  </data>
  <data name="Upload_TagsDescription" xml:space="preserve">
    <value>restrict download to comma-separated list of tags.</value>
  </data>
  <data name="Upload_TeamsDescription" xml:space="preserve">
    <value>restrict download to comma-separated list of team IDs.</value>
  </data>
  <data name="Upload_TokenDescription" xml:space="preserve">
    <value>(required), Your HockeyApp token.</value>
  </data>
  <data name="Upload_UsersDescription" xml:space="preserve">
    <value>restrict download to comma-separated list of user IDs.</value>
  </data>
  <data name="Common_Empty" xml:space="preserve">
    <value>Empty</value>
  </data>
  <data name="Help_CommandExample" xml:space="preserve">
    <value>      {0} [COMMAND]</value>
  </data>
  <data name="Common_Command" xml:space="preserve">
    <value>Command</value>
  </data>
  <data name="Common_Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Help_ModuleDescription" xml:space="preserve">
    <value>Show help message and exit</value>
  </data>
  <data name="Help_ModuleKeyword" xml:space="preserve">
    <value>help</value>
  </data>
</root>